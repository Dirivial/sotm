// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Category {
    id              String         @id @default(cuid())
    rating          Float          @default(0)
    name            String
    color           String
    description     String         @default("")
    User            User?          @relation(fields: [userId], references: [id])
    userId          String?
    accumulatedTime Float          @default(0)
    DailyEntry      DailyEntry[]
    MonthlyEntry    MonthlyEntry[]
    YearlyEntry     YearlyEntry[]
    WeekdayEntry    WeekdayEntry[]

    @@index([userId])
}

model DailyEntry {
    id         String   @id @default(cuid())
    startTime  DateTime
    endTime    DateTime
    category   Category @relation(fields: [categoryId], references: [id])
    day        Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
    dayId      String
    categoryId String

    @@index([dayId])
    @@index([categoryId])
}

model WeekdayEntry {
    id              String   @id @default(cuid())
    weekDay         Int
    category        Category @relation(fields: [categoryId], references: [id])
    week            Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
    weekId          String
    categoryId      String
    accumulatedTime Float    @default(0)
    rating          Float    @default(0)

    @@index([weekId])
    @@index([categoryId])
}

model MonthlyEntry {
    id              String   @id @default(cuid())
    month           Month    @relation(fields: [monthId], references: [id], onDelete: Cascade)
    monthId         String
    category        Category @relation(fields: [categoryId], references: [id])
    categoryId      String
    accumulatedTime Float    @default(0)
    rating          Float    @default(0)

    @@index([monthId])
    @@index([categoryId])
}

model YearlyEntry {
    id              String   @id @default(cuid())
    rating          Float    @default(0)
    year            Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)
    yearId          String
    category        Category @relation(fields: [categoryId], references: [id])
    categoryId      String
    accumulatedTime Float    @default(0)

    @@index([yearId])
    @@index([categoryId])
}

model Day {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    rating    Float        @default(0)
    weekDay   Int
    date      DateTime     @unique
    entries   DailyEntry[]
    Month     Month?       @relation(fields: [monthId], references: [id])
    monthId   String?
    User      User?        @relation(fields: [userId], references: [id])
    userId    String?

    @@index([monthId])
    @@index([userId])
}

model Week {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    rating       Float          @default(0)
    date         DateTime       @unique
    Month        Month?         @relation(fields: [monthId], references: [id])
    monthId      String?
    User         User?          @relation(fields: [userId], references: [id])
    userId       String?
    weekdayEntry WeekdayEntry[]

    @@index([monthId])
    @@index([userId])
}

model Month {
    id           String         @id @default(cuid())
    month        Int
    year         Int
    days         Day[]
    Year         Year?          @relation(fields: [yearId], references: [id])
    yearId       String?
    MonthlyEntry MonthlyEntry[]
    User         User?          @relation(fields: [userId], references: [id])
    userId       String?
    Week         Week[]

    @@index([yearId])
    @@index([userId])
}

model Year {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    year        Int
    months      Month[]
    YearlyEntry YearlyEntry[]
    User        User?         @relation(fields: [userId], references: [id])
    userId      String?

    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    weekDaysAverage Json?

    days     Day[]
    months   Month[]
    years    Year[]
    Category Category[]
    Week     Week[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
