import { type NextPage } from "next";
import { useState } from "React";
import Head from "next/head";
import Link from "next/link";
import { DndContext, type DragEndEvent } from "@dnd-kit/core";
import Item from "../components/Item";
import { SortableContext, arrayMove } from "@dnd-kit/sortable";
import { useAutoAnimate } from "@formkit/auto-animate/react";

type ListItem = {
  id: string;
  content: string;
};

const Logger: NextPage = () => {
  const [items, setItems] = useState<ListItem[]>(() => []);
  const [animationParent, enableAnimation] = useAutoAnimate();

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;

    if (over && active.id !== over.id) {
      setItems((items) => {
        const activeIndex = items.findIndex((item) => item.id == active.id);
        const overIndex = items.findIndex((item) => item.id == over.id);

        return arrayMove(items, activeIndex, overIndex);
      });
    }
  };

  const handleCreate = () => {
    setItems((items) =>
      items.concat({ id: items.length.toString(), content: "testing" })
    );
  };

  return (
    <>
      <Head>
        <title>Logger - TimeLume</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#7B93DB] to-[#BED0F7]">
        <Link href="/" className="absolute left-4 top-4">
          <h1 className="text-xl font-extrabold italic tracking-tight text-white sm:text-[2rem]">
            Time<span className="text-[#35469C]">Lume</span>
          </h1>
        </Link>
        <div className="container flex h-screen flex-col items-center gap-12 px-4 py-16 ">
          <div className="flex max-h-full flex-row gap-x-2">
            <div className="flex flex-col gap-y-2">
              <button
                className="rounded-md bg-primary5 p-5"
                onClick={handleCreate}
              >
                Create
              </button>
              <button
                className="rounded-md bg-primary5 p-5"
                onClick={() => enableAnimation(false)}
              >
                Disable Animation
              </button>
              <button
                className="rounded-md bg-primary5 p-5"
                onClick={() => enableAnimation(true)}
              >
                Enable Animation
              </button>
            </div>

            <div>
              <DndContext onDragEnd={handleDragEnd}>
                <div
                  ref={animationParent}
                  className="carbon-bg max-h-full min-h-full min-w-[250px] overflow-scroll rounded-sm border-2 p-2"
                >
                  <SortableContext items={items.map((i) => i.id)}>
                    {items.map((item) => (
                      <Item key={item.id} dragId={item.id} />
                    ))}
                  </SortableContext>
                </div>
              </DndContext>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Logger;
