import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { DndContext, DragOverlay, type DragEndEvent } from "@dnd-kit/core";
import Item from "../components/Item";
import { SortableContext, arrayMove } from "@dnd-kit/sortable";
import CategoryCombobox from "~/components/CategoryCombobox";
import { Tab } from "@headlessui/react";

type ListItem = {
  id: string;
  content: string;
  weekday: number;
  duration: string;
};

type Category = {
  id: number;
  name: string;
};

type ActiveItem = {
  id: number;
  name: string;
  duration: string;
};

type Weekday = {
  id: number;
  name: string;
  abb_name: string;
  list_items: ListItem[];
};

type Week = {
  0: Weekday;
  1: Weekday;
  2: Weekday;
  3: Weekday;
  4: Weekday;
  5: Weekday;
  6: Weekday;
};

const tabs = [
  { name: "Monday", abb_name: "Mon" },
  { name: "Tuesday", abb_name: "Tue" },
  { name: "Wednesday", abb_name: "Wed" },
  { name: "Thursday", abb_name: "Thu" },
  { name: "Friday", abb_name: "Fri" },
  { name: "Saturday", abb_name: "Sat" },
  { name: "Sunday", abb_name: "Sun" },
];

const mycategories: Category[] = [
  { id: 1, name: "Work" },
  { id: 2, name: "Sleep" },
  { id: 3, name: "Personal" },
  { id: 4, name: "Social" },
  { id: 5, name: "Health" },
  { id: 6, name: "Other" },
];

// Keeping this here for now, might be useful later
// const [weekdays, setWeekdays] = useState<Week>({
//   0: { id: 0, name: "Monday", abb_name: "Mon", list_items: [] },
//   1: { id: 1, name: "Tuesday", abb_name: "Tue", list_items: [] },
//   2: { id: 2, name: "Wednesday", abb_name: "Wed", list_items: [] },
//   3: { id: 3, name: "Thursday", abb_name: "Thu", list_items: [] },
//   4: { id: 4, name: "Friday", abb_name: "Fri", list_items: [] },
//   5: { id: 5, name: "Saturday", abb_name: "Sat", list_items: [] },
//   6: { id: 6, name: "Sunday", abb_name: "Sun", list_items: [] },
// });

const WeeklyGoal: NextPage = () => {
  const [currentDay, setCurrentDay] = useState<number>(0);
  const [items, setItems] = useState<ListItem[]>(() => []);
  const [active, setActive] = useState<ActiveItem>({
    id: 0,
    name: "",
    duration: "00:00",
  });
  // const [categories, setCategories] = useState<string[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<Category>({
    id: 1,
    name: "Work",
  });

  const handleDragEnd = (event: DragEndEvent) => {
    setActive({ id: 0, name: "", duration: "00:00" });
    const { active, over } = event;

    if (over && active.id !== over.id) {
      setItems((items) => {
        const activeIndex = items.findIndex((item) => item.id == active.id);
        const overIndex = items.findIndex((item) => item.id == over.id);

        return arrayMove(items, activeIndex, overIndex);
      });
    }
  };

  const handleDayChange = (index: number) => {
    if (index === currentDay) return;
    if (index < 0 || index > 6) return;
    setCurrentDay(index);
  };

  const handleDragStart = (event: DragEndEvent) => {
    const i = items.find((item) => item.id == event.active.id);
    console.log(i);
    setActive({
      id: Number(event.active.id),
      name: i ? i.content : "",
      duration: i ? i.duration : "00:00",
    });
  };

  const handleCreate = () => {
    setItems((items) =>
      items.concat({
        id: (items.length + 1).toString(),
        content: selectedCategory ? selectedCategory.name : "Item",
        duration: "00:00",
        weekday: currentDay,
      })
    );
  };

  const handleRemove = (id: string) => {
    setItems((items) => items.filter((item) => item.id !== id));
  };

  const handleItemUpdate = (id: string, content: string, time: string) => {
    setItems((items) =>
      items.map((li) => {
        if (li.id === id) {
          li.content = content;
          li.duration = time;
        }
        return li;
      })
    );
  };

  return (
    <>
      <Head>
        <title>Goals - TimeLume</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#7B93DB] to-[#BED0F7]">
        <Link href="/" className="absolute left-4 top-4">
          <h1 className="text-xl font-extrabold italic tracking-tight text-white sm:text-[2rem]">
            Time<span className="text-[#35469C]">Lume</span>
          </h1>
        </Link>
        <div className="container flex h-screen flex-col items-center gap-12 px-4 py-16 ">
          <div className="flex h-screen max-h-full flex-row gap-x-2">
            <div className="flex flex-col gap-y-5 pr-5">
              <CategoryCombobox
                categories={mycategories}
                updateSelected={setSelectedCategory}
              />
              <button
                className="rounded-md bg-primary5 p-5 text-neutral9"
                onClick={handleCreate}
              >
                Add
              </button>
            </div>

            <div className="">
              <div className="h-full w-full max-w-md px-2 sm:px-0">
                <Tab.Group onChange={handleDayChange}>
                  <Tab.List className="flex space-x-1 rounded-xl bg-blue-900/20 p-1">
                    {tabs.map((weekday, index) => (
                      <Tab
                        key={index}
                        className={({ selected }) =>
                          "w-full rounded-lg py-2.5 text-sm font-medium leading-5 text-neutral7 " +
                          "focus:outline-none " +
                          (selected
                            ? "bg-supportingBlue0 text-neutral9 shadow"
                            : "hover:bg-primary1/[0.3] hover:text-neutral9")
                        }
                      >
                        {weekday.abb_name}
                      </Tab>
                    ))}
                  </Tab.List>

                  <DndContext
                    onDragStart={handleDragStart}
                    onDragEnd={handleDragEnd}
                  >
                    <div className="grid-bg mt-2 h-5/6 max-h-full min-w-[350px] overflow-scroll rounded-sm border-2 border-[#b3ecff50] px-2">
                      <SortableContext items={items.map((i) => i.id)}>
                        {items
                          .filter((value) => value.weekday === currentDay)
                          .map((item) => (
                            <Item
                              key={item.id}
                              dragId={item.id}
                              content={`${item.content}`}
                              opacity={
                                active.id === Number(item.id)
                                  ? "opacity-40"
                                  : ""
                              }
                              removeItem={handleRemove}
                              initialTime={item.duration}
                              updateContent={handleItemUpdate}
                            />
                          ))}
                      </SortableContext>

                      <DragOverlay>
                        {active.id > -1 ? (
                          <Item
                            opacity="opacity-90"
                            dragId={active.id.toString()}
                            content={active.name}
                            initialTime={active.duration}
                            updateContent={handleItemUpdate}
                          />
                        ) : null}
                      </DragOverlay>
                    </div>
                  </DndContext>
                </Tab.Group>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default WeeklyGoal;
